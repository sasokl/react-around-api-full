{"ast":null,"code":"export const BASE_URL = 'http://localhost:3000';\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => {\n    if (!response.ok) {\n      return response.text().then(text => {\n        throw new Error(text);\n      });\n    }\n\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => {\n    if (!response.ok) return response.text().then(text => {\n      throw new Error(text);\n    });\n    return response.json();\n  }).then(res => {\n    if (res) {\n      localStorage.setItem('jwt', res.token);\n      return res;\n    }\n  }).catch(err => console.log(err));\n};\nexport const checkToken = token => {\n  console.log(`hello ${token}`);\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    if (!response.ok) return response.text().then(text => {\n      throw new Error(text);\n    });\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["A:/PracticumProj/react-around-api-full/frontend/src/utils/auth.js"],"names":["BASE_URL","register","password","email","fetch","method","headers","body","JSON","stringify","then","response","ok","text","Error","json","catch","err","console","log","authorize","res","localStorage","setItem","token","checkToken","authorization"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAf;AALyB,GAAvB,CAAL,CAOFO,IAPE,CAOIC,QAAD,IAAc;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBG,IAAI,IAAI;AAChC,cAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACH,OAFM,CAAP;AAGH;;AACD,WAAOF,QAAQ,CAACI,IAAT,EAAP;AACH,GAdE,EAeFC,KAfE,CAeKC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAfb,CAAP;AAgBH,CAjBM;AAmBP,OAAO,MAAMG,SAAS,GAAG,CAAClB,QAAD,EAAWC,KAAX,KAAqB;AAC1C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAf;AALyB,GAAvB,CAAL,CAOFO,IAPE,CAOIC,QAAD,IAAc;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,OAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBG,IAAI,IAAI;AAClD,YAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACH,KAFwB,CAAP;AAGlB,WAAOF,QAAQ,CAACI,IAAT,EAAP;AACH,GAZE,EAaFL,IAbE,CAaIW,GAAD,IAAS;AACX,QAAIA,GAAJ,EAAS;AACLC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,GAAG,CAACG,KAAhC;AACA,aAAOH,GAAP;AACH;AACJ,GAlBE,EAmBFL,KAnBE,CAmBKC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAnBb,CAAP;AAoBH,CArBM;AAuBP,OAAO,MAAMQ,UAAU,GAAID,KAAD,IAAW;AACjCN,EAAAA,OAAO,CAACC,GAAR,CAAa,SAAQK,KAAM,EAA3B;AACA,SAAOpB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACjCK,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELoB,MAAAA,aAAa,EAAG,UAASF,KAAM;AAF1B;AAFwB,GAAzB,CAAL,CAOFd,IAPE,CAOIC,QAAD,IAAc;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,OAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBG,IAAI,IAAI;AAClD,YAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACH,KAFwB,CAAP;AAGlB,WAAOF,QAAQ,CAACI,IAAT,EAAP;AACH,GAZE,EAaFC,KAbE,CAaKC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAbb,CAAP;AAcH,CAhBM","sourcesContent":["export const BASE_URL = 'http://localhost:3000';\r\n\r\nexport const register = (password, email) => {\r\n    return fetch(`${BASE_URL}/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({password, email})\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.text().then(text => {\r\n                    throw new Error(text)\r\n                })\r\n            }\r\n            return response.json()\r\n        })\r\n        .catch((err) => console.log(err))\r\n};\r\n\r\nexport const authorize = (password, email) => {\r\n    return fetch(`${BASE_URL}/signin`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({password, email})\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) return response.text().then(text => {\r\n                throw new Error(text)\r\n            })\r\n            return response.json();\r\n        })\r\n        .then((res) => {\r\n            if (res) {\r\n                localStorage.setItem('jwt', res.token);\r\n                return res;\r\n            }\r\n        })\r\n        .catch((err) => console.log(err));\r\n};\r\n\r\nexport const checkToken = (token) => {\r\n    console.log(`hello ${token}`);\r\n    return fetch(`${BASE_URL}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            authorization: `Bearer ${token}`,\r\n        }\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) return response.text().then(text => {\r\n                throw new Error(text)\r\n            })\r\n            return response.json();\r\n        })\r\n        .catch((err) => console.log(err));\r\n}"]},"metadata":{},"sourceType":"module"}