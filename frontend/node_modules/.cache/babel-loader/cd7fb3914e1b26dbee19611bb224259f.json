{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    console.log(this._headers);\n  }\n  /**\r\n   * Checks the status of a request response. Returns corresponding result.\r\n   * @param res request response\r\n   * @returns {any|Promise<never>}\r\n   * @private\r\n   */\n\n\n  _checkRes(res) {\n    return res.ok ? res.json() : Promise.reject(`Error: ${res.status}\\n${res.statusText}`);\n  }\n  /**\r\n   * Returns cards from the server.\r\n   * @returns {Promise<never>}\r\n   */\n\n\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Adds a card to the server\r\n   * @param name name of the card\r\n   * @param link link to the card image\r\n   * @returns {Promise<Response>}\r\n   */\n\n\n  addCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Deletes a card from the server\r\n   * @param cardID card id\r\n   * @returns {Promise<never>}\r\n   */\n\n\n  deleteCard(cardID) {\n    return fetch(`${this._baseUrl}/cards/${cardID}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Returns user's info from the server\r\n   * @returns {Promise<never>}\r\n   */\n\n\n  getUser() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Update user's info on the server\r\n   * @param name name of the user\r\n   * @param about user's job\r\n   * @returns {Promise<Response>}\r\n   */\n\n\n  setUser(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Changes the avatar picture.\r\n   * @param avatar link to the avatar picture\r\n   * @returns {Promise<never>}\r\n   */\n\n\n  setAvatarPicture(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Likes the card by id. Updates the like property on the server.\r\n   * @param cardID card id\r\n   * @returns {Promise<never>}\r\n   */\n\n\n  likeCard(cardID) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardID}`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Unlikes the card by id. Updates the like property on the server.\r\n   * @param cardID card id\r\n   * @returns {Promise<never>}\r\n   */\n\n\n  unlikeCard(cardID) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardID}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  /**\r\n   * Changes the like status of the card by card id depends on 'isLiked' parameter.\r\n   * @param cardID card id\r\n   * @param isLiked boolean type parameter of card like status. true if card already liked, otherwise false.\r\n   * @returns {Promise<never>}\r\n   */\n\n\n  changeLikeCardStatus(cardID, isLiked) {\n    return isLiked ? this.unlikeCard(cardID) : this.likeCard(cardID);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"http://localhost:3000\",\n  headers: {\n    'Content-Type': 'application/json',\n    authorization: `Bearer ${localStorage.getItem('jwt')}`\n  }\n});\nexport default api;","map":{"version":3,"sources":["A:/PracticumProj/react-around-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","console","log","_checkRes","res","ok","json","Promise","reject","status","statusText","getCards","fetch","then","addCard","name","link","method","body","JSON","stringify","deleteCard","cardID","getUser","setUser","about","setAvatarPicture","avatar","likeCard","unlikeCard","changeLikeCardStatus","isLiked","api","authorization","localStorage","getItem"],"mappings":"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","sourcesContent":["class Api {\r\n  constructor({baseUrl, headers}) {\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n    console.log(this._headers);\r\n  }\r\n\r\n  /**\r\n   * Checks the status of a request response. Returns corresponding result.\r\n   * @param res request response\r\n   * @returns {any|Promise<never>}\r\n   * @private\r\n   */\r\n  _checkRes(res) {\r\n    return res.ok\r\n      ? res.json()\r\n      : Promise.reject(`Error: ${res.status}\\n${res.statusText}`);\r\n  }\r\n\r\n  /**\r\n   * Returns cards from the server.\r\n   * @returns {Promise<never>}\r\n   */\r\n  getCards() {\r\n    return fetch(`${this._baseUrl}/cards`, {headers: this._headers})\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Adds a card to the server\r\n   * @param name name of the card\r\n   * @param link link to the card image\r\n   * @returns {Promise<Response>}\r\n   */\r\n  addCard(name, link) {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: \"POST\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        link: link\r\n      })\r\n    })\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Deletes a card from the server\r\n   * @param cardID card id\r\n   * @returns {Promise<never>}\r\n   */\r\n  deleteCard(cardID) {\r\n    return fetch(`${this._baseUrl}/cards/${cardID}`, {\r\n      method: \"DELETE\",\r\n      headers: this._headers\r\n    })\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Returns user's info from the server\r\n   * @returns {Promise<never>}\r\n   */\r\n  getUser() {\r\n    return fetch(`${this._baseUrl}/users/me`, {headers: this._headers})\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Update user's info on the server\r\n   * @param name name of the user\r\n   * @param about user's job\r\n   * @returns {Promise<Response>}\r\n   */\r\n  setUser(name, about) {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: about\r\n      })\r\n    })\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Changes the avatar picture.\r\n   * @param avatar link to the avatar picture\r\n   * @returns {Promise<never>}\r\n   */\r\n  setAvatarPicture(avatar) {\r\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: avatar,\r\n      })\r\n    })\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Likes the card by id. Updates the like property on the server.\r\n   * @param cardID card id\r\n   * @returns {Promise<never>}\r\n   */\r\n  likeCard(cardID) {\r\n    return fetch(`${this._baseUrl}/cards/likes/${cardID}`, {\r\n      method: \"PUT\",\r\n      headers: this._headers,\r\n    })\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Unlikes the card by id. Updates the like property on the server.\r\n   * @param cardID card id\r\n   * @returns {Promise<never>}\r\n   */\r\n  unlikeCard(cardID) {\r\n    return fetch(`${this._baseUrl}/cards/likes/${cardID}`, {\r\n      method: \"DELETE\",\r\n      headers: this._headers,\r\n    })\r\n      .then(this._checkRes);\r\n  }\r\n\r\n  /**\r\n   * Changes the like status of the card by card id depends on 'isLiked' parameter.\r\n   * @param cardID card id\r\n   * @param isLiked boolean type parameter of card like status. true if card already liked, otherwise false.\r\n   * @returns {Promise<never>}\r\n   */\r\n  changeLikeCardStatus(cardID, isLiked) {\r\n    return isLiked ? this.unlikeCard(cardID) : this.likeCard(cardID);\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  baseUrl: \"http://localhost:3000\",\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    authorization: `Bearer ${localStorage.getItem('jwt')}`\r\n  },\r\n});\r\n\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}